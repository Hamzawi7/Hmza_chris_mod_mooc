
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime

def average(l):
    "returns average of a list of numbers"
    avg=(sum(l)/float(len(l)))
    avg=round(avg, 4)
    return avg

def graphing(YesLoad, h):
    "take raw data gathered as arguments"    

    "create figure and plot"
    plt.figure(1)
    plt.subplot(111)

    "label axis"
    plt.ylabel('Ping(ms)')
    plt.xlabel('Hosts')
    plt.ylim(0,2500)
    "Give title"
    plt.title("yoyoyooyoyoyooyooooooo")
    
    "insert hosts along x axis"
    plt.xticks(np.arange(len(h)),h)

    avg=[]
    for o in range(0,len(h)):
        avg.append(average(YesLoad[h[o]]))
        
    plt.plot(range(0,len(h)), avg, 'o-')
    

    "show graph"
    plt.show()



def createHTML(figure1, figure2, hosts, it):
    print "*** Generating Document"
    now=datetime.now()
    now=now.strftime('%Y_%m_%d_%H_%M_%S')
    f=open('results-'+now+'.html', 'w+')
    f.write("<!doctype html>\n")
    f.write("<h1>Results - %s</h1>\n" % now)
    for i in range(0,2):
        if i==0: figure=figure1
        elif i==1: figure=figure2

        f.write("<p><b>%s</b></p>\n" % figure['name'])
        f.write("<table>\n")
        f.write("<tr><b><th>Host</th><th>No load</th><th>Medium load</th><th>High Load</th></b></tr>\n")
        for i in range(0, len(hosts)):
            f.write("<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>" % ( hosts[i].name, 
                                                                                str(average(figure['none']['times'][hosts[i].name])),
                                                                                str(average(figure['med']['times'][hosts[i].name])), 
                                                                                str(average(figure['high']['times'][hosts[i].name])) ))
            f.write("\n")
        f.write("</table>\n")

        f.write("<p><b>Traffic stats</b></p>\n")
        for i in range(0,3):

            if i == 0: temp='none';
            elif i == 1: temp='med'
            elif i == 2: temp='high'
        
            f.write("<p><b>Load: %s</b></p>\n" % temp)

            pingsSec=round(it*len(hosts)/float(str(figure[temp]['timeTaken'])), 3)
            throughput=0
    
            f.write('<p>Packets Dropped: %s<br>\n' % str(len(figure[temp]['dropped'])))
            f.write('Time elapsed: %ss<br>\n' % str(figure[temp]['timeTaken']))
            f.write('Pings/second: %sms<br>\n' % str(pingsSec))
            f.write('Throughput: %sMb/s<br></p>\n' % str(throughput))

            if len(figure[temp]['dropped']) != 0:
                f.write("<p>Dropped pings:<br>\n")
                for i in range( 0, len(figure[temp]['dropped']) ):
                    f.write("ah2 -> %s<br>\n" % str(figure[temp]['dropped'][i]))
                f.write("</p>\n")

            f.write("<p>Times:<br>\n")
            for h in hosts:
                f.write("%s: %s<br>\n" % (str(h.name), (figure[temp]['times'][h.name])))
            f.write("</p>\n")

    print "*** Document created"

    f.close()

def p(figure, hosts, it):
    
    print "*** %s\n" % (figure['name'])
    print "\033[1m"+"\tHost\t\tNo Load \tMedium Load\tHigh Load"+"\033[0m"
    for i in range(0, len(hosts)):
        print "\t%s:\t\t%sms   \t%sms   \t%sms" % ( hosts[i].name, 
                                                    str(average(figure['none']['times'][hosts[i].name])), 
                                                    str(average(figure['med']['times'][hosts[i].name])), 
                                                    str(average(figure['high']['times'][hosts[i].name])) )
    

    print "\n\tTraffic stats\n"
    for i in range(0,3):

        if i == 0: temp='none'
        elif i == 1: temp='med'
        elif i == 2: temp='high'
        
        print "\t%s" % temp

        pingsSec=round(it*len(hosts)/float(str(figure[temp]['timeTaken'])), 3)
        throughput=0
        print "\tPackets Dropped: %s \n\tTime Elapsed: %ss \n\tPings/second: %sms \n\tThroughput: %sMb/s" % ( str(len(figure[temp]['dropped'])),
                                                                                            str(figure[temp]['timeTaken']),
                                                                                            str(pingsSec), str(throughput) )
        if len(figure[temp]['dropped']) != 0:
            print "\tDropped pings:"
            for i in range( 0, len(figure[temp]['dropped']) ):
                print "\t\tah2 -> %s" % str(figure[temp]['dropped'][i])

        print "\tTimes:"
        for h in hosts:
            print "\t\t%s: %s" % (str(h.name), (figure[temp]['times'][h.name]))
        print "\n"
    
        

def init(hostNames, hosts, static, adaptive, it):
    
    "print results of tests to user in table"
    print "*** Results"

    while True:
        pRes=raw_input("\tWould you like to print the results [y/n]? ")
        if pRes.lower() in ['y', 'n']:
            break
        else:
            print "\tInvalid input."
            continue
    
    
    if pRes.lower() == 'y':
        p(static, hosts, it)
        p(adaptive, hosts, it)

    while True:
        cRes=raw_input("\tWould you like to create a file of results [y/n]? ")
        if cRes.lower() in ['y', 'n']:
            break
        else:
            print "\tInvalid input."
            continue

    if cRes.lower() == 'y':
        createHTML(static, adaptive, hosts, it)
